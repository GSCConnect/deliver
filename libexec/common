#!/usr/bin/env bash

init_app_remotely() {
  local git_remote="$(git remote -v)"

  status "Ensuring remote is ready to accept git pushes"

  for _host in $SERVERS_APP_USER
  do
    local _remote_url="$_host:$DELIVER_TO"
    if [[ ! "$git_remote" =~ "$_host $_remote_url" ]]; then
      [[ "$git_remote" =~ "$_host" ]] && git remote rm "$_host"
      git remote add "$_host" "$_remote_url"
    fi
  done

  __remote "
    set -e
    if [ ! -d $DELIVER_TO ]
    then
      mkdir $DELIVER_TO
      cd $DELIVER_TO
      git init $SILENCE
      git config receive.denyCurrentBranch ignore
    fi
  "
}

git_push() {
  local _hosts="${2:-"$SERVERS_APP_USER"}"

  status "Pushing new commits with git to: $_hosts"

  background_jobs_pids=()
  background_jobs=()

  for _host in $_hosts
  do
    local _background_job="git push -f $_host $BRANCH $SILENCE"
    __log "JOB: $_background_job"
    ( eval "$_background_job" ) &
    background_jobs_pids+=("$!")
    background_jobs+=("$_background_job")
  done

  #__log "GIT PUSH PIDS: ${background_jobs_pids[@]}"

  __monitor_background_jobs
}

git_reset_remote() {
  status "Resetting remote to $BRANCH branch"
  __remote "
    set -e
    cd $DELIVER_TO $SILENCE
    git reset --hard $BRANCH $SILENCE
  "
}

git_submodules() {
  status "Updating all git submodules"
  __remote "
    set -e
    cd $DELIVER_TO $SILENCE
    git submodule init $SILENCE
    git submodule sync $SILENCE
    git submodule update $SILENCE
  "
}

rvmrc_trust() {
  status "Trusting rvmrc in $DELIVER_TO"
  __remote "
    set -e
    . .profile
    rvm rvmrc trust $DELIVER_TO $SILENCE
  "
}


bundle_install() {
  status "Installing gems with bundler"
  __remote "
    set -e
    . .profile
    cd $DELIVER_TO $SILENCE
    bundle install --local --deployment --without development test $SILENCE
  "
}

npm_install() {
  status "Installing modules with npm"
  __remote "
    set -e
    . .profile
    cd $DELIVER_TO $SILENCE
    npm install $SILENCE
  "
}

foreman_export() {
  status "Exporting services to $SUPERVISOR"
  local _foreman="foreman export $SUPERVISOR tmp --user $APP_USER --app $APP"
  test -n "$PORT" && _foreman="$_foreman --port $PORT"
  test -n "$FOREMAN_EXTRAS" && _foreman="$_foreman $FOREMAN_EXTRAS"

  __remote "
    set -e
    . .profile
    cd $DELIVER_TO $SILENCE
    $_foreman $SILENCE
  "
}

upstart() {
  status "Launching app with $SUPERVISOR"
  # This command, because of the sudo dependency, will use your local $USER.
  # You should be able to log in with $USER to the remote servers, and you
  # should be able to run sudo without needing a password.
  #
  # I will be tackling this shortly, you really shouldn't neeed sudo
  # privileges to deliver an app. What was I thinking?!?
  __remote "
    set -e
    if [[ \$(sudo initctl list | awk '/^'$APP' / { print \$0 }') =~ 'run' ]]; then
      sudo stop $APP $SILENCE
    fi
    sudo rm -f /etc/init/$APP[.-]*
    sudo mv -f $DELIVER_TO/tmp/*conf /etc/init/
    sudo start $APP $SILENCE
  " "$SERVERS"
}
